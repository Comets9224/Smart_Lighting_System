C51 COMPILER V9.59.0.0   UART                                                              10/26/2024 18:58:48 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: D:\CodeDesign\Keil5-C51\C51\BIN\C51.EXE uart.c COMPACT OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include "uart.h"
   2          #include "lcd12864.h"
   3          #include "timer.h"
   4          #include "main.h"
   5          #include "stdio.h"
   6          bit BT_flag=0;
   7          bit blue_timeflag;
   8          char buffer[16];  // 在函数中定义 buffer
   9          char BT_op='0';
  10          void UART_Init(void)
  11          {
  12   1          SCON = 0x50;   // 设置串口工作模式
  13   1          TMOD &= 0x0F;  // 清除高4位（定时器1的配置位）
  14   1          TMOD |= 0x20;  // 设置定时器1为模式2（8位自动重装）
  15   1          TH1 = 0xFD;    // 设置波特率为9600
  16   1          TL1 = 0xFD;
  17   1          TR1 = 1;       // 启动定时器1
  18   1          ES = 1;        // 使能串口中断
  19   1      }
  20          
  21          void UART_SendByte(unsigned char dat)
  22          {
  23   1          SBUF = dat;
  24   1          while(!TI);
  25   1          TI = 0;
  26   1      }
  27          
  28          void UART_SendString(unsigned char *str)
  29          {
  30   1          while(*str)
  31   1          {
  32   2              UART_SendByte(*str++);
  33   2          }
  34   1      }
  35          void UART_ISR(void) interrupt 4 {
  36   1          if (RI) {
  37   2              RI = 0;
  38   2      
  39   2              switch (SBUF) {
  40   3                  case 'A':
  41   3                      if(HP_flag == 1)
  42   3                        LCD_DisplayString(0, 3, "On Time Adj");
  43   3                      if (BT_op != '1') {
  44   4                          UART_SendString("Enter On Adj Mode\r\n");
  45   4                          BT_op = '1';
  46   4                      } else {
  47   4                          UART_SendString("Exit On Adj Mode\r\n");
  48   4                          BT_op = '0';
  49   4                      }
  50   3                      break;
  51   3                  case 'B':
  52   3                      if(HP_flag == 1)
  53   3                        LCD_DisplayString(0, 3, "Off Time Adj");
  54   3                      if (BT_op != '2') {
C51 COMPILER V9.59.0.0   UART                                                              10/26/2024 18:58:48 PAGE 2   

  55   4                          UART_SendString("Enter Off Adj Mode\r\n");
  56   4                          BT_op = '2';
  57   4                      } else {
  58   4                          UART_SendString("Exit Off Adj Mode\r\n");
  59   4                          BT_op = '0';
  60   4                      }
  61   3                      break;
  62   3                  case 'C':
  63   3                      if(HP_flag == 1)
  64   3                        LCD_DisplayString(0, 3, "Now Time Adj");
  65   3                      if (BT_op != '3') {
  66   4                          UART_SendString("Enter Current Adj Mode\r\n");
  67   4                          BT_op = '3';
  68   4                      } else {
  69   4                          UART_SendString("Exit Current Adj Mode\r\n");
  70   4                          BT_op = '0';
  71   4                      }
  72   3                      break;
  73   3                  case 'D':
  74   3                      if (HP_flag == 1&&(BT_op!='0')) {
  75   4                          LCD_DisplayString(0, 3, "Hour add 1h");
  76   4                      }
  77   3                      if (BT_op == '1') {
  78   4                          on_hours = (on_hours + 1) % 24;
  79   4                          UART_SendString("On Time: ");
  80   4                          sprintf(buffer, "%d:%d:%d\r\n", on_hours, on_minutes, on_seconds);
  81   4                          UART_SendString(buffer);
  82   4                      } else if (BT_op == '2') {
  83   4                          off_hours = (off_hours + 1) % 24;
  84   4                          UART_SendString("Off Time: ");
  85   4                          sprintf(buffer, "%d:%d:%d\r\n", off_hours, off_minutes, off_seconds);
  86   4                          UART_SendString(buffer);
  87   4                      } else if (BT_op == '3') {
  88   4                          hours = (hours + 1) % 24;
  89   4                          UART_SendString("Current Time: ");
  90   4                          sprintf(buffer, "%d:%d:%d\r\n", hours, minutes, seconds);
  91   4                          UART_SendString(buffer);
  92   4                      }
  93   3                      break;
  94   3                  case 'E':
  95   3                      if (HP_flag == 1&&(BT_op!='0')) {
  96   4                          LCD_DisplayString(0, 3, "Min add 1min");
  97   4                      }
  98   3                      if (BT_op == '1') {
  99   4                          on_minutes = (on_minutes + 1) % 60;
 100   4                          UART_SendString("On Time: ");
 101   4                          sprintf(buffer, "%d:%d:%d\r\n", on_hours, on_minutes, on_seconds);
 102   4                          UART_SendString(buffer);
 103   4                      } else if (BT_op == '2') {
 104   4                          off_minutes = (off_minutes + 1) % 60;
 105   4                          UART_SendString("Off Time: ");
 106   4                          sprintf(buffer, "%d:%d:%d\r\n", off_hours, off_minutes, off_seconds);
 107   4                          UART_SendString(buffer);
 108   4                      } else if (BT_op == '3') {
 109   4                          minutes = (minutes + 1) % 60;
 110   4                          UART_SendString("Current Time: ");
 111   4                          sprintf(buffer, "%d:%d:%d\r\n", hours, minutes, seconds);
 112   4                          UART_SendString(buffer);
 113   4                      }
 114   3                      break;
 115   3                      case 'I':
 116   3                        if (HP_flag == 1) {
C51 COMPILER V9.59.0.0   UART                                                              10/26/2024 18:58:48 PAGE 3   

 117   4                           LCD_DisplayString(0, 3, "OnOffLight");
 118   4                      }
 119   3                      
 120   3                      LED_flag = ~LED_flag;
 121   3                      
 122   3                      if(LED_flag==1)
 123   3                      {UART_SendString("Waiting On...");
 124   4                        blue_timeflag=1;
 125   4                      }
 126   3                      if(LED_flag==0)
 127   3                      {UART_SendString("Waiting Off...");
 128   4                       blue_timeflag=0;}
 129   3                      break;
 130   3                      case 'F':
 131   3                          if (HP_flag == 1) {
 132   4                         LCD_DisplayString(0, 3, "SysInfoReturn");
 133   4                      }
 134   3                      
 135   3                      UartInfo();
 136   3                      break;
 137   3              }
 138   2              BT_flag = 1;
 139   2          }
 140   1      }
 141          
 142          
 143          void UartInfo(void) {
 144   1      
 145   1          // 发送当前时间
 146   1          UART_SendString("Current Time: ");
 147   1          sprintf(buffer, "%d", hours);
 148   1          UART_SendString(buffer);
 149   1          UART_SendString(":");
 150   1          sprintf(buffer, "%d", minutes);
 151   1          UART_SendString(buffer);
 152   1          UART_SendString(":");
 153   1          sprintf(buffer, "%d", seconds);
 154   1          UART_SendString(buffer);
 155   1          UART_SendString("\r\n");
 156   1      
 157   1          // 发送开启时间
 158   1          UART_SendString("On Time: ");
 159   1          sprintf(buffer, "%d", on_hours);
 160   1          UART_SendString(buffer);
 161   1          UART_SendString(":");
 162   1          sprintf(buffer, "%d", on_minutes);
 163   1          UART_SendString(buffer);
 164   1          UART_SendString(":");
 165   1          sprintf(buffer, "%d", on_seconds);
 166   1          UART_SendString(buffer);
 167   1          UART_SendString("\r\n");
 168   1      
 169   1          // 发送关闭时间
 170   1          UART_SendString("Off Time: ");
 171   1          sprintf(buffer, "%d", off_hours);
 172   1          UART_SendString(buffer);
 173   1          UART_SendString(":");
 174   1          sprintf(buffer, "%d", off_minutes);
 175   1          UART_SendString(buffer);
 176   1          UART_SendString(":");
 177   1          sprintf(buffer, "%d", off_seconds);
 178   1          UART_SendString(buffer);
C51 COMPILER V9.59.0.0   UART                                                              10/26/2024 18:58:48 PAGE 4   

 179   1          UART_SendString("\r\n");
 180   1          
 181   1          //发送亮度信息
 182   1          UART_SendString("Light: ");
 183   1          sprintf(buffer, "%d per", percent);
 184   1          UART_SendString(buffer);
 185   1          UART_SendString("\r\n");
 186   1          //发送照度信息
 187   1          
 188   1          UART_SendString("Lux: ");
 189   1          sprintf(buffer, "%d",avg_lux);
 190   1          UART_SendString(buffer);
 191   1          UART_SendString("\r\n");
 192   1      
 193   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1389    ----
   CONSTANT SIZE    =    322    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     17       3
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
